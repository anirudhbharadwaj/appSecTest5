#!/bin/bash

#************** Functions ***********************************

#This function creates the bsl entries related to the fetch operation
function update_bsl_fetch {
		git checkout -q bsl
		csplit bsl '/^-----BEGIN PGP SIGNED MESSAGE-----$/' '{*}'
        LAST_ENTRY=`ls -r x*|head -1`
        HASH=`cat $LAST_ENTRY|shasum | cut -d' ' -f1`

        
        echo "Branch:"$CURRENT_BRANCH >bsl.tmp
        FETCH_HEAD=`cat .git/FETCH_HEAD |grep $CURRENT_BRANCH |cut -f1`
        echo "FETCH_HEAD:"$FETCH_HEAD >>bsl.tmp
        echo "PREV_HASH:"$HASH >>bsl.tmp
        rm x*

}

#This function pushes the bsl branch to server
function push_bsl {
		git push -q --set-upstream origin bsl 2>/dev/null
		#Checking the status of BSL Push
		status=$?	

}


# This function will sign the bsl entries and commits the changes 
function sign_bsl {

		#Signthe bsl
		cat bsl.tmp |gpg --clearsign >>bsl

		#Remove temp file
		rm bsl.tmp

		# Commit the new BSL
		git add bsl
		git commit -S -qm "Commiting the changes at BSL"
}


#This function intializes the bsl branch and creates bsl file intial entries
function bsl_init {

		#Set init variabe
		init=1
		git checkout -q --orphan bsl
        git rm -qrf .
        echo "Branch:"$CURRENT_BRANCH >bsl.tmp
        if [ -e ".git/FETCH_HEAD" ]
        then
        	FETCH_HEAD=`cat .git/FETCH_HEAD |grep $CURRENT_BRANCH |cut -f1`
        fi
        echo "FETCH_HEAD:"$FETCH_HEAD >>bsl.tmp
        echo "PREV_HASH:" >>bsl.tmp
}

#This function verifies the bsl file
function bsl_verify {

		git checkout -q bsl
		if git diff $BSL_PREV_HEAD HEAD --stat|grep -q 'deletion'
		then
		    echo "BSL file corrupted"
		fi

		csplit bsl '/^-----BEGIN PGP SIGNED MESSAGE-----$/' '{*}'
		#verify the signature on last enry
		LAST_ENTRY=`ls -r x*|head -1` 
		echo "******* Verifying the sign on last bsl entry *******"
		gpg --verify $LAST_ENTRY &> /dev/null 
		local status=$?
		if [ $status -ne 0 ]
		then
			echo "Signature verification on last entry is failed"
		else
			echo "Signature verification on last entry is successful"
		fi
		echo "****************************************************"

		#verifying the signature
		echo "******* Verifying the Hash on all bsl entries *********"
		for i in `ls -r x*`
		do
		    HASH_2=`cat $i|shasum|cut -d' ' -f1`
		    if [[ "$HASH_2" != "$HASH_1" && ! -z "$HASH_1" ]]
		    then
		        echo "Hash verfication on the following entry failed"
		        echo "HASH_1:"$HASH_1 "  HASH_2":$HASH_2
		        echo `cat $i`
		        rm x*
		        exit 1
		    else
			    HASH_1=`cat $i|grep 'PREV_HASH:'|cut -d':' -f2`
			    rm $i
			fi

		done
		echo "Hash verification successful on all entries"
		echo "****************************************************"
		echo "*******Verifying the branch head matches with the bsl entry*********"
		if [ "$BSL_BRANCH_HEAD" != "$FETCH_HEAD" ]
		then
			echo "Verification failed"
		else 
			echo "Verification successful"
		fi
		echo "****************************************************"
}



# This function fetches the bsl and related branch
function bsl_fetch {

	git fetch -q origin bsl 
    git checkout -q bsl

    #Capturing the state of BSL before the merge
    BSL_PREV_HEAD=`git rev-parse HEAD`
    git merge -q

    #Fetch the current branch from server
    git fetch -q origin $CURRENT_BRANCH 2>/dev/null

    #Get the branch head from the bsl
    BSL_BRANCH_HEAD=`cat bsl |grep HEAD |tail -1|cut -d':' -f2`

    #Get the FETCH_HEAD 
    FETCH_HEAD=`cat .git/FETCH_HEAD |grep $CURRENT_BRANCH |cut -f1`

    #Verify the branch head in BSL matches with the FETCH_HEAD
    if  [ "$BSL_BRANCH_HEAD" != "$FETCH_HEAD" ]
    then
    	fetch_status=1 
    else
    	fetch_status=0
    fi
}

#**********************************************************************




#Get Current Brach
CURRENT_BRANCH=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

#check if we are pushing bsl branch
if [ "$CURRENT_BRANCH" == "bsl" ]
then
    exit 0
fi

status=1
# Repeat the following steps until bsl push is successful
while [ $status -ne 0 ]
do
	#Fetch BSL
	if  [[ $(git branch -a |grep 'remotes/origin/bsl') ]]
	then

		fetch_status=1
		while [ $fetch_status -ne 0 ]
		do 
			#fetch the BSL branch and current branch
			echo "Fetching the bsl ..."
			bsl_fetch
		done

		# Update the BSL file 
		echo "Updating the bsl ..."
		update_bsl_fetch
	else
		# BSL branch Intialization
		echo "Intializing the bsl ..."
		bsl_init

	fi
	
	#Sign the BSL
	echo "Signing and Commiting the bsl ..."
	sign_bsl
	echo "Pushing the bsl ... "
	push_bsl
	if [ $status -ne 0 ]
	then 
		echo "bsl push failed !!"
		git reset --hard origin/bsl
	fi
done

#Verify Bsl
echo "Verifying the bsl ..."
if [ "$init" != "1" ]
then 
	bsl_verify
else
	echo "Verification is not required as this is the intial entry of bsl "
fi

#Switch back to current branch 
git checkout -q $CURRENT_BRANCH


